(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{191:function(t,e,r){"use strict";r.r(e);var a=r(0),n=Object(a.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),r("p",[t._v("在为这个工具收尾，开始写各种文档的时候，突然就产生了莫名的又惶恐、又慌张、又失落的感觉，高兴的感觉反而很少，只是松了一口气，和我高考完的感觉好像有些像。这个工具我断断续续的开发了大概三个月的时间，中途因为实验比较紧张中断了一段，在论文答辩完成后我又兴冲冲地恢复了开发，最后5月底收尾又收了四五天。")]),t._v(" "),t._m(1),t._v(" "),r("p",[t._v("在别的段落也提到过，我是一个比较纯粹的工科男。作为一个工科男，我有几个行为总是很难改。一个是造轮子，因为觉得没有很好的Markdown转LaTeX的方案，我写了一个 "),r("a",{attrs:{href:"https://github.com/sailist/MarkTex",target:"_blank",rel:"noopener noreferrer"}},[t._v("MarkTex"),r("OutboundLink")],1),t._v("；因为写 LaTeX 的时候表格公式之类的不方便，我写了一个 "),r("a",{attrs:{href:"https://github.com/sailist/LatexTool",target:"_blank",rel:"noopener noreferrer"}},[t._v("LatexTool"),r("OutboundLink")],1),t._v("...，然后因为深度学习实验要处理的繁琐事情太多，我一开始写了一个 "),r("a",{attrs:{href:"https://github.com/sailist/TorchHelper",target:"_blank",rel:"noopener noreferrer"}},[t._v("TorchHelper"),r("OutboundLink")],1),t._v(" 来帮我处理，后来这个项目代码耦合性太高，而且bug也很多不是很顺心，我就重写下了这个项目 "),r("code",[t._v("thexp")]),t._v("。")]),t._v(" "),r("p",[t._v("另一个则是执着于代码可读性。这个习惯可能来源于我大一时候的java课设，因为要在不懂面向对象、数据结构的情况下硬生生的写一个聊天软件，我反复的重写了三遍我的代码，最终实现了一个结构还算可以的聊天软件（这种“结构还可以的”感觉一直持续到我后来接触了事件这一概念）。自此我就一直执着于写好的代码。")]),t._v(" "),r("p",[t._v("说我曾经的项目不是为了带货（笑），而是想说，虽然我一直执着于代码结构和可读性，但我现在的主要工作，是做科研。做科研，出成果的原因永远不是因为工具有多么好用。一个工具能帮我自动记录所有做过的实验，但如果我的idea很差，我的数据很糟糕，哪怕我做一千次实验，分析来分析去，分析的再好，有用吗？我觉得没用。")]),t._v(" "),r("p",[t._v("电子竞技不需要视力，科研学术不需要代码（这一句是我为了顺口编的）。这两句话当然是玩笑话，但是确实，代码可读性很重要吗？其实没那么重要，要验证一个IDEA哪怕从头开始写，也实在浪费不了太多的时间，一个普通的IDEA可能一个星期左右就能够验证完，有什么结论有什么问题能提出什么改进应该已经能下一个结论来做下一组实验，在这种反复迭代的情况下，这一实验工作彻底结束前，代码哪怕再乱也不会出现找不到的情况：加起来十几二十几个文件，不超过一万行（还有许多重复）的代码，再乱能乱到哪里去？")]),t._v(" "),r("p",[t._v("我们都知道，科研看的是最后的结果，这在开篇已经举过例子了，我sota了，代码写的再烂，你不一样还是要来看我的源码；反之，代码写的再好，实验结果一团糟，有人看吗？")]),t._v(" "),r("p",[t._v("我写下这个项目，是希望有工具能够节省我做实验的时间，让我能有更多的时间去读论文，去思考，去做更多的实验，而不是把我节省在做实验上的时间拿来优化实验代码。这可能是我这种负面情绪的来源：我是否正在做这种事情呢？")]),t._v(" "),t._m(2)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"重要的永远不是工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重要的永远不是工具","aria-hidden":"true"}},[this._v("#")]),this._v(" 重要的永远不是工具")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我到底为什么而惶恐，为什么而失落呢。思来想去，我还是觉得要写一下，我觉得这些思考很有必要在阅读完前面的章节后阅读，所以我把它放在了 "),e("code",[this._v("cookbook")]),this._v(" 的最后。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在 "),e("code",[this._v("cookbook")]),this._v(" 的第一篇的目的是介绍为什么要写，以及对希望在提高深度学习代码可读性这一方面上和大家找到共鸣。第二篇的目的是基于我做的一些实验，给出了一些简单的示例。而这一篇的目的，则是对我，以及和我一样对代码可读性有异常执着的人（如果有）提一个醒，过犹不及，做实验最重要的永远不是工具。至于什么重要，什么更重要，什么最重要，大家心里或许有不同的答案。")])}],!1,null,null,null);n.options.__file="3-more-important.md";e.default=n.exports}}]);